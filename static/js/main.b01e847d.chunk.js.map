{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","offers","setOffers","count","setCount","isRunning","setIsRunning","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","dd","Date","newOffer","date","setMinutes","getMinutes","toLocaleDateString","hour","minute","second","amount","Math","floor","random","bid","className","scope","map","offer","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQA8EeA,MA3EF,WAEX,IAFiB,EAGWC,mBAAS,IAHpB,mBAGVC,EAHU,KAGFC,EAHE,OAISF,mBAAS,GAJlB,mBAIVG,EAJU,KAIHC,EAJG,OAKiBJ,oBAAS,GAL1B,mBAKVK,EALU,KAKCC,EALD,KA6BjB,OA0BF,SAAqBC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IAjEJQ,EACE,WACI,IAAIC,EAAK,IAAIC,KACPC,EAAW,CACfN,GAAIV,EACJiB,KAAM,IAAIF,KAAKD,EAAGI,WAAWJ,EAAGK,aAAuB,GAARnB,IAAaoB,mBAAmB,QAAS,CAACC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YACrIC,OAAQC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GACzCC,IAAKH,KAAKC,MAAM,IAAsB,IAAhBD,KAAKE,UAAkB,KAE3C3B,EAAQ,GACVG,GAAa,GACbF,EAASD,EAAQ,IAEjBG,GAAa,GAIfJ,EAAU,GAAD,mBAAKD,GAAL,CAAakB,OAE1Bd,EAxBY,IAwBQ,MAIpB,yBAAK2B,UAAU,gBACb,2BAAOA,UAAU,qBACf,+BACE,4BACE,wBAAIC,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGhC,EAAOiC,KAAI,SAAAC,GAAK,OACf,wBAAIC,IAAKD,EAAMtB,IACb,wBAAIoB,MAAM,OAAOE,EAAMtB,IACvB,4BAAKsB,EAAMf,MACX,4BAAKe,EAAMR,QACX,4BAAKQ,EAAMJ,aCrCLM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b01e847d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst  App = () => {\n  // change delay here in ms\n  const delay = 5000;\n  const [offers, setOffers] = useState([]);\n  const [count, setCount] = useState(0);\n  const [isRunning, setIsRunning] = useState(true);\n\n  useInterval(\n    () => {\n        let dd = new Date();\n        const newOffer = {\n          id: count,\n          date: new Date(dd.setMinutes(dd.getMinutes() + count * 10)).toLocaleDateString(\"en-GB\", {hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"}),\n          amount: Math.floor(Math.random() * 10) / 10,\n          bid: Math.floor(9.5 + Math.random() * 100) / 100\n        };\n        if (count < 4) {\n          setIsRunning(true);\n          setCount(count + 1);\n        } else {\n          setIsRunning(false);\n        }\n        \n        // Your custom logic here\n        setOffers([...offers, newOffer]);\n    },\n    isRunning ? delay : null\n  );\n\n  return (\n    <div className=\"container-sm\">\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th scope=\"col\">id</th>\n            <th scope=\"col\">Date</th>\n            <th scope=\"col\">Amount</th>\n            <th scope=\"col\">Bid</th>\n          </tr>\n        </thead>\n        <tbody>\n          {offers.map(offer => (\n            <tr key={offer.id}>\n              <th scope=\"row\">{offer.id}</th>\n              <td>{offer.date}</td>\n              <td>{offer.amount}</td>\n              <td>{offer.bid}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}